// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id       String   @id @default(uuid())
  email    String   @unique
  password String?
  posts    Posts[]
  profile  Profile?
}

model Profile {
  id           String   @id @default(uuid())
  firstName    String?
  middleName   String?
  lastName     String?
  bio          String?
  profileImage String?
  userId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user Users @relation(fields: [userId], references: [id])
}

model Posts {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  postImage String?
  published Boolean  @default(false)
  authorId  String

  author Users @relation(fields: [authorId], references: [id])

  tags TagsOnPosts[]
}

model Tags {
  id   String @id @default(uuid())
  name String

  posts TagsOnPosts[]
}

model TagsOnPosts {
  postId String
  tagId  String

  post Posts @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tags  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId]) // Composite primary key for uniqueness
}
