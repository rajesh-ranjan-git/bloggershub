// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String?
  posts        Post[]
  profile      Profile?
  comments     Comment[]
  PostLikes    PostLikes[]
  CommentLikes CommentLikes[]
}

model Profile {
  id           String   @id @default(uuid())
  firstName    String?
  middleName   String?
  lastName     String?
  bio          String?
  profileImage String?
  designation  String?
  dob          String?
  phoneNumber  String?
  country      String?
  userId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String
  postImage String?
  published Boolean  @default(false)
  authorId  String

  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags      TagsOnPosts[]
  comments  Comment[]
  PostLikes PostLikes[]
}

model Tag {
  id   String @id @default(uuid())
  name String @unique

  posts TagsOnPosts[]
}

model TagsOnPosts {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId]) // Composite primary key for uniqueness
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  parentId     String?
  parent       Comment?       @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies      Comment[]      @relation("CommentReplies")
  CommentLikes CommentLikes[]
}

model PostLikes {
  id        String   @id @default(uuid())
  liked     Boolean
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId]) // Ensure a user can like a post only once
}

model CommentLikes {
  id        String   @id @default(uuid())
  liked     Boolean
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, commentId]) // Ensure a user can like a comment only once
}
